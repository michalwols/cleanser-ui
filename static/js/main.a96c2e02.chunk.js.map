{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["sampleTexts","hashText","text","i","hash","length","charCodeAt","dedupe","list","key","filter","elem","index","self","findIndex","t","TextDoc","raw","_ref2","arguments","undefined","timeCreated","id","timeModified","Object","classCallCheck","this","tokens","tokenize","annotations","suggestions","attributes","Date","now","isCompleted","Counter","items","counts","Map","update","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","x","value","set","get","err","return","toConsumableArray","entries","sort","a","b","split","Tag","_ref3","children","react_default","createElement","className","Span","_ref4","_ref4$tags","tags","_useState","useState","_useState2","slicedToArray","selected","setSelected","concat","onClick","map","tag","App_Tag","Text","_ref5","App_Span","includes","App","results","_useState3","_useState4","texts","updateTexts","_useState5","_useState6","query","updateQuery","toLowerCase","match","e","normalizedQuery","tokenCounts","r","flat","onPaste","stopPropagation","clipboardData","getData","onDrop","preventDefault","console","debug","dataTransfer","types","files","Papa","parse","header","worker","preview","chunk","parser","log","data","input","onDragEnter","onDragOver","placeholder","type","onChange","target","t1","t2","slice","App_Text","mostCommon","style","margin","JSON","stringify","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a96c2e02.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css'\n\nimport Papa from 'papaparse'\n\nconst sampleTexts = [\n  'Winnti is a highly complex structure that is difficult to penetrate. The term denotes both a sophisticated malware and an actual group of hackers. IT security experts like to call them digital mercenaries. Since at least 2011, these hackers have been using malware to spy on corporate networks. Their mode of operation: to collect information on the organizational charts of companies, on cooperating departments, on the IT systems of individual business units, and on trade secrets, obviously.',\n\n  'Asked about the group an IT security expert who has been analyzing the attacks for years replies, tongue in cheek: “Any DAX corporation that hasn’t been attacked by Winnti must have done something wrong.” A high-ranking German official says: “The numbers of cases are mind-boggling.” And claims that the group continues to be highly active—to this very day. The official’s name will remain undisclosed, as will names of the more than 30 people whom we were able to interview for this article: Company staff, IT security experts, government officials, and representatives of security authorities. They are either not willing or not allowed to speak frankly. But they are allowed to reveal some of their tactics.',\n\n  'This allows us to find the software and to figure out for ourselves how the attackers work. Thanks to the help received from the informers, we, the reporters, are able to get on to the group. Part of their trail is the following code: daa0 c7cb f4f0 fbcf d6d1.',\n\n  'Logging:',\n\n  'The hackers’ individual steps are stored in log files.',\n\n  'Modern-day espionage operations have one big advantage: Instead of painstakingly planting agents in companies, digital spies are simply sending prepared emails. Instead of taking pictures of confidential documents while the rest of the staff is out to lunch, hackers can remotely log on to company computers and send their commands from their keyboard. But every hacking operation also comes with a huge drawback. It leaves digital traces. If you notice hackers, you can log their every step. The hackers themselves have no clue that they are under meticulous scrutiny, sometimes even for months at a time.',\n\n  'To decipher the traces of hackers, you need to take a closer look at the program code of the malware itself. It can be found in databases operated by private companies like “Virustotal.” The company is owned by Google and is a kind of malware search engine. The information stored in that database is so valuable to IT consultants and security companies that they pay thousands of Euros per month for accessing it. Anybody who is unsure whether a mail attachment contains a Trojan can have it checked in that database by more than 50 antivirus programs. In return, Virustotal stores the file with the aid of a digital fingerprint. This digital fingerprint allows others to search for the file and to analyze the codes it contains. People like ourselves.'\n]\n\nconst interpretLabelingFunction = body => new Function('doc', body)\n\nconst hashText = text => {\n  let hash = 0,\n    i,\n    chr\n  if (text.length === 0) return hash\n  for (i = 0; i < text.length; i++) {\n    chr = text.charCodeAt(i)\n    hash = (hash << 5) - hash + chr\n    hash |= 0 // Convert to 32bit integer\n  }\n  return hash\n}\n\nconst dedupe = (list, key) =>\n  list.filter(\n    (elem, index, self) =>\n      self.findIndex(t => {\n        return t[key] === elem[key]\n      }) === index\n  )\n\nclass Data {\n  constructor(raw, { id, timeCreated, timeModified } = {}) {\n    this.id = id\n    this.raw = raw\n    this.timeCreated = timeCreated || Date.now()\n    this.timeModified = timeModified\n  }\n}\n\nclass TextDoc {\n  constructor(raw, { id, timeCreated, timeModified } = {}) {\n    this.id = hashText(raw)\n    this.raw = raw\n    this.tokens = tokenize(raw)\n    this.annotations = []\n    this.suggestions = []\n    this.attributes = {\n      length: this.raw.length\n    }\n\n    this.timeCreated = timeCreated || Date.now()\n    this.timeModified = timeModified\n\n    this.isCompleted = false\n  }\n\n  static fromSpacy() {}\n}\n\nclass Audio {}\n\nclass Image {}\n\nclass Counter {\n  constructor(items) {\n    this.counts = new Map()\n    this.update(items)\n  }\n\n  update(items) {\n    for (let x of items) {\n      this.counts.set(x, (this.counts.get(x) || 0) + 1)\n    }\n  }\n\n  mostCommon() {\n    return [...this.counts.entries()].sort((a, b) => b[1] - a[1])\n  }\n}\n\nconst tokenize = text => text.split(' ')\n\nconst Tag = ({ children }) => <span className={'tag'}>{children}</span>\n\nexport const Span = ({ children, tags = [] } = {}) => {\n  const [selected, setSelected] = useState(false)\n\n  return (\n    <span\n      className={`segment ${selected ? 'selected' : ''} ${\n        tags.length ? 'tagged' : ''\n      }`}\n      onClick={() => setSelected(!selected)}>\n      {children}\n      {tags.map(tag => (\n        <Tag>{tag}</Tag>\n      ))}\n    </span>\n  )\n}\n\nconst Text = ({ children }) => (\n  <div className={'text'}>\n    {tokenize(children).map(t => (\n      <Span tags={t.includes('an') ? ['an'] : []}>{t} </Span>\n    ))}\n  </div>\n)\n\nfunction App() {\n  const [texts, updateTexts] = useState(sampleTexts.map(t => new TextDoc(t)))\n  const [query, updateQuery] = useState('')\n\n  const normalizedQuery = query.toLowerCase()\n  // const results = texts.filter(t =>\n  //   query.length ? t.raw.toLowerCase().includes(normalizedQuery) : true\n  // )\n\n  let results\n  try {\n    results = texts.filter(t => (query.length ? t.raw.match(query) : true))\n  } catch (e) {\n    const normalizedQuery = query.toLowerCase()\n    results = texts.filter(t =>\n      query.length ? t.raw.toLowerCase().includes(normalizedQuery) : true\n    )\n  }\n\n  const tokenCounts = new Counter(results.map(r => r.tokens).flat())\n\n  return (\n    <div\n      className=\"app\"\n      onPaste={e => {\n        e.stopPropagation()\n        updateTexts(\n          dedupe(\n            [\n              ...e.clipboardData\n                .getData('text/plain')\n                .split('\\n')\n                .map(t => new TextDoc(t)),\n              ...texts\n            ],\n            'id'\n          )\n        )\n      }}\n      onDrop={e => {\n        e.stopPropagation()\n        e.preventDefault()\n        console.debug(e.dataTransfer.types)\n        if (e.dataTransfer.files) {\n          Papa.parse(e.dataTransfer.files[0], {\n            header: true,\n            worker: true,\n            preview: 150000,\n            chunk: (results, parser) => {\n              console.log(results)\n              const data = results.data.map(x => x.input)\n              updateTexts(\n                dedupe([...data.map(t => new TextDoc(t)), ...texts], 'id')\n              )\n            }\n          })\n        } else {\n          const data = e.dataTransfer.getData('text/plain')\n          updateTexts(\n            dedupe(\n              [...data.split('\\n').map(t => new TextDoc(t)), ...texts],\n              'id'\n            )\n          )\n        }\n      }}\n      onDragEnter={e => {\n        e.stopPropagation()\n        e.preventDefault()\n      }}\n      onDragOver={e => {\n        e.stopPropagation()\n        e.preventDefault()\n      }}>\n      <div className={'header-branding'}>\n        <h2 className={'cleanser-logo'}>\n          Cleanser\n          <p>exfoliate your data!</p>\n        </h2>\n      </div>\n\n      <header>\n        <div className={'search'}>\n          <input\n            placeholder={'search...'}\n            className={'search-input'}\n            type=\"text\"\n            value={query}\n            onPaste={e => {\n              e.stopPropagation()\n            }}\n            onChange={e => updateQuery(e.target.value)}\n          />\n        </div>\n      </header>\n\n      <div className=\"content\">\n        {results\n          .sort((t1, t2) => (t1.raw < t2.raw ? -1 : 1))\n          .slice(0, 150)\n          .map(t => (\n            <Text key={t.id}>{t.raw}</Text>\n          ))}\n      </div>\n\n      <div className={'sidebar'}>\n        <div className={'search-info'}>\n          <aside>{results.length} documents</aside>\n        </div>\n\n        <div>\n          {tokenCounts\n            .mostCommon()\n            .slice(0, 30)\n            .map(e => (\n              <p style={{margin: 0}}>\n                {e[0]}: {e[1]}\n              </p>\n            ))}\n        </div>\n\n        <button onClick={() => console.log(JSON.stringify(texts))}>\n          export\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}